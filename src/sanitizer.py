"""A module for sanitizing and cleaning up raw output from the LLM."""

import re

class Sanitizer:
    """Cleans and sanitizes text generated by the LLM."""

    def clean_code(self, code: str) -> str:
        """
        Performs a series of cleaning operations on a block of code.
        - Removes markdown code fences (```java ... ```).
        - Extracts content from CDATA sections (<![CDATA[ ... ]]>).
        
        Args:
            code: The raw code string from the LLM.
            
        Returns:
            The cleaned code string.
        """
        if not code:
            return ""
            
        # 1. Handle CDATA sections first
        cdata_match = re.search(r'<!\[CDATA\[(.*)\]\]>', code, re.DOTALL)
        if cdata_match:
            code = cdata_match.group(1).strip()
            
        # 2. Handle markdown code fences
        # Normalize newlines before splitting
        lines = code.replace('\\n', '\n').split('\n')
        
        # Check and remove starting fence
        if lines and re.match(r'^\s*```', lines[0]):
            # Also remove potential language specifier like "java"
            lines.pop(0)
            
        # Check and remove ending fence
        if lines and re.match(r'^\s*```', lines[-1]):
            lines.pop(-1)
            
        return '\n'.join(lines).strip()

    def was_last_clean_successful(self, raw_code: str, sanitized_code: str, threshold: int = 50) -> bool:
        """
        Determines if the cleaning process was successful by checking if it
        removed more characters than a given threshold, which would indicate
        the LLM included significant unwanted artifacts.

        Args:
            raw_code: The original string from the LLM.
            sanitized_code: The string after cleaning.
            threshold: The maximum number of characters that can be removed
                       for the cleaning to be considered successful.

        Returns:
            True if the number of removed characters is within the threshold, False otherwise.
        """
        if not raw_code and sanitized_code:
            return True # Sanitizer added content? Unlikely but not a failure.
        
        chars_removed = len(raw_code) - len(sanitized_code)
        return chars_removed <= threshold 