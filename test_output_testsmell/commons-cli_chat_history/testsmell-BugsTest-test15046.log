================= ROLE: USER =================

<Test Smell Types>Eager Test</Test Smell Types>
<Test Frameworks>JUnit 5</Test Frameworks>
<Test Case Source Code>@Test
    public void test15046() throws Exception {
        final CommandLineParser parser = new PosixParser();
        final String[] cliArgs = {"-z", "c"};

        final Options options = new Options();
        options.addOption(new Option("z", "timezone", true, "affected option"));

        parser.parse(options, cliArgs);

        // now add conflicting option
        options.addOption("c", "conflict", true, "conflict option");
        final CommandLine line = parser.parse(options, cliArgs);
        assertEquals(line.getOptionValue('z'), "c");
        assertFalse(line.hasOption("c"));
    }</Test Case Source Code>
<Test Case Import Packages>org.junit.jupiter.api.Assertions.assertEquals, org.junit.jupiter.api.Assertions.assertFalse, org.junit.jupiter.api.Assertions.assertNotNull, org.junit.jupiter.api.Assertions.assertNull, org.junit.jupiter.api.Assertions.assertThrows, org.junit.jupiter.api.Assertions.assertTrue, org.junit.jupiter.api.Assertions.fail, java.io.ByteArrayOutputStream, java.io.PrintStream, java.io.PrintWriter, java.util.Iterator, java.util.Properties, org.apache.commons.cli.CommandLine, org.apache.commons.cli.CommandLineParser, org.apache.commons.cli.GnuParser, org.apache.commons.cli.HelpFormatter, org.apache.commons.cli.MissingArgumentException, org.apache.commons.cli.Option, org.apache.commons.cli.OptionBuilder, org.apache.commons.cli.OptionGroup, org.apache.commons.cli.Options, org.apache.commons.cli.ParseException, org.apache.commons.cli.Parser, org.apache.commons.cli.PosixParser, org.apache.commons.lang3.ArrayUtils, org.junit.jupiter.api.Test</Test Case Import Packages>
<Production Function Implementations></Production Function Implementations>
<Test Case Before Methods></Test Case Before Methods>
<Test Case After Methods></Test Case After Methods>
<Test Case Before All Methods></Test Case Before All Methods>
<Test Case After All Methods></Test Case After All Methods>
<Refactoring Rules>### Test Smell: Eager Test
RefactorRule:
  SmellType: Eager Test
  Description: "Refactor test methods to group related assertions logically and extract reusable setup logic into private methods."
  Steps:
    - Step1:
        Description: "Extract shared setup logic into a reusable, private method and ensure it is used across all relevant tests."
        Action: ExtractSetupMethod
        Parameters:
          Condition: "If multiple tests share the same setup logic."
          MethodNamePattern: setupTest{OriginalMethodName}
    - Step2:
        Description: "Group related assertions into cohesive sub-tests while retaining necessary setup logic."
        Action: GroupAssertions
        Parameters:
          GroupBy: LogicalConcern
    - Step3:
        Description: "Create new test methods for each cohesive group of assertions and ensure readability."
        Action: CreateTestMethods
        Parameters:
          IncludeSetup: True
          NamePattern: test{OriginalMethodName}_{Concern}
  Example:
    Before: |
      @Test
      public void testExample() {
          setup();
          assertEquals(1, methodA());
          assertTrue(methodB());
      }
    After: |
      private void setupTestExample() {
          setup();
      }

      @Test
      public void testExample_MethodA() {
          setupTestExample();
          assertEquals(1, methodA());
      }

      @Test
      public void testExample_MethodB() {
          setupTestExample();
          assertTrue(methodB());
      }
  Variables:
    OriginalMethodName: The name of the original test method.
    LogicalConcern: The logical aspect tested (e.g., a specific API, validation, or behavior).
</Refactoring Rules>

================= ROLE: ASSISTANT =================

<Refactored Test Case Source Code>
    // Shared fixtures extracted from the original test15046
    private CommandLineParser parser;
    private String[] cliArgs;
    private Options options;

    private void setupTest15046() {
        parser = new PosixParser();
        cliArgs = new String[] { "-z", "c" };
        options = new Options();
        options.addOption(new Option("z", "timezone", true, "affected option"));
    }

    @Test
    public void test15046_TimezoneOption() throws Exception {
        setupTest15046();
        // Parse only the timezone option
        CommandLine line = parser.parse(options, cliArgs);
        assertEquals("c", line.getOptionValue('z'),
                     "Should parse and return the correct timezone value");
    }

    @Test
    public void test15046_ConflictOption() throws Exception {
        setupTest15046();
        // Now add a conflicting option and re-parse
        options.addOption("c", "conflict", true, "conflict option");
        CommandLine line = parser.parse(options, cliArgs);
        assertFalse(line.hasOption("c"),
                    "Should not recognize the conflicting 'c' option");
    }
</Refactored Test Case Source Code>

<Refactored Test Case Additional Import Packages>
static org.junit.jupiter.api.Assertions.assertEquals
static org.junit.jupiter.api.Assertions.assertFalse
org.junit.jupiter.api.Test
org.apache.commons.cli.CommandLineParser
org.apache.commons.cli.PosixParser
org.apache.commons.cli.Options
org.apache.commons.cli.Option
org.apache.commons.cli.CommandLine
</Refactored Test Case Additional Import Packages>

<Refactoring Reasoning>
Identified Smell: Eager Test  
1. Extracted the shared setup logic (instantiating the parser, arguments, and initial “z” option) into a private method `setupTest15046()`.  
2. Introduced two focused test methods—`test15046_TimezoneOption` and `test15046_ConflictOption`—so each method covers one cohesive assertion group.  
3. Each test invokes `setupTest15046()`, then performs only the actions and assertions relevant to its single concern, improving readability and maintainability.  
4. Added descriptive assertion messages to clarify intent.  
This refactoring fully addresses the Eager Test smell by splitting the original multi-assertion method into small, purpose-specific tests and extracting common setup.  
</Refactoring Reasoning>

