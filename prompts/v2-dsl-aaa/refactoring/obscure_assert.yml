SmellType: "Obscure Assert"
Description: "The Assert block contains complex logic (e.g., loops, conditionals, or multiple statements), which makes the test's intent difficult to understand. It should be refactored into a clear, declarative assertion using a library like Hamcrest."
Variables:
  OriginalAssertBlock: "The original, complex block of code in the Assert section."
  ActualValue: "The actual object or collection being verified in the assertion."
  HamcrestMatcher: "A descriptive Hamcrest matcher that encapsulates the complex logic."
Steps:
  - Description: "Identify the complex assertion logic block at the end of the method."
    Action: "IdentifyBlock"
    Parameters:
      SourcePattern: "Look for a block containing loops (for, while), conditionals (if), or multiple assertions against the same object."

  - Description: "Replace the entire complex assertion block with a single, expressive 'assertThat' call using an appropriate Hamcrest matcher."
    Action: "ReplaceBlock"
    Parameters:
      TargetPattern: "{OriginalAssertBlock}"
      ReplacementPattern: "assertThat({ActualValue}, {HamcrestMatcher});"

  - Description: "Add the static import for Hamcrest's 'assertThat' method - THIS IS MANDATORY."
    Action: "AddImport"
    Parameters:
      Import: "static org.hamcrest.MatcherAssert.assertThat"

  - Description: "Add static imports for all Hamcrest matchers used in the code - THIS IS MANDATORY."
    Action: "AddImport"
    Parameters:
      Import: "static org.hamcrest.Matchers.*"

RequiredImports:
  - "static org.hamcrest.MatcherAssert.assertThat"
  - "static org.hamcrest.Matchers.*"

ImportInstructions: |
  CRITICAL: You MUST include the following imports in your "Refactored Test Case Additional Import Packages" section:
  - static org.hamcrest.MatcherAssert.assertThat
  - static org.hamcrest.Matchers.*
  
  These imports are required for compilation. Do NOT omit them.

Example:
  Before: |
    @Test
    public void testFindAdminUser() {
        // Arrange
        List<User> users = repository.findAll();
        
        // Act
        User admin = null;
        for (User user : users) {
            if (user.isAdmin()) {
                admin = user;
                break;
            }
        }

        // Assert
        assertNotNull(admin);
        assertEquals("Alice", admin.getName());
    }
  After: |
    @Test
    public void testFindAdminUser() {
        // Arrange
        List<User> users = repository.findAll();
        
        // Act & Assert
        assertThat(users, hasItem(
            allOf(
                hasProperty("name", equalTo("Alice")),
                hasProperty("admin", is(true))
            )
        ));
    }
  RequiredImports: |
    static org.hamcrest.MatcherAssert.assertThat
    static org.hamcrest.Matchers.* 