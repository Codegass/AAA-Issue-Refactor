SmellType: Arrange & Quit
Description: The test includes a conditional return statement in the Arrange block, which prematurely exits the test. This makes the test's behavior dependent on environmental state and can hide failures. It should be replaced with an 'assume' statement.
Variables:
  ConditionalReturnBlock: The if-statement block that causes the test to exit early.
  Condition: The boolean condition inside the if-statement.
Steps:
  - Description: Identify any conditional block in the Arrange section that contains a 'return' statement.
    Action: IdentifyBlock
    Parameters:
      SourcePattern: Find an 'if (...) { return; }' or 'if (...) return;' statement before the main 'Act' part of the test.

  - Description: Replace the conditional return block with a JUnit 'Assume.assumeTrue(...)' call. This properly signals to the test runner that the test should be skipped, not silently passed.
    Action: ReplaceBlock
    Parameters:
      TargetPattern: "{ConditionalReturnBlock}"
      ReplacementPattern: "Assume.assumeTrue({Condition});"

  - Description: Add the required import for the Assume API if it's not already present.
    Action: AddImport
    Parameters:
      Import: "org.junit.Assume"

RequiredImports:
  - "org.junit.Assume"

ImportInstructions: |
  CRITICAL: You MUST include the correct import for the Assume API:
  - org.junit.Assume (for JUnit 4)
  - org.junit.jupiter.api.Assumptions (for JUnit 5)
  
  CRITICAL - Parameter Order for Assume API:
  
  JUnit 4 (org.junit.Assume):
  - Single parameter: Assume.assumeTrue(condition)
  - With message: Assume.assumeTrue("message", condition)  // MESSAGE FIRST!
  - Invert condition: if (!condition) return; becomes Assume.assumeTrue(condition);
  
  JUnit 5 (org.junit.jupiter.api.Assumptions):
  - Single parameter: Assumptions.assumeTrue(condition)
  - With message: Assumptions.assumeTrue(condition, "message")  // CONDITION FIRST!
  - Invert condition: if (!condition) return; becomes Assumptions.assumeTrue(condition);

CompilationSafety: |
  Ensure the refactored test method:
  1. Has the correct import for Assume/Assumptions based on JUnit version
  2. Uses correct parameter order for the detected JUnit version
  3. Properly inverts the condition when necessary (if (!condition) return; â†’ assumeTrue(condition))
  4. Maintains proper variable scope for all condition checks
  5. Preserves the original test logic in the main execution path

Example:
  Before: |
    @Test
    public void testRemoteService() {
        // Arrange
        RemoteSystem system = getRemoteSystem();
        if (!system.isAvailable()) {
            return; // This is the issue
        }

        // Act
        Result result = system.performOperation();

        // Assert
        assertTrue(result.isSuccess());
    }
  After: |
    @Test
    public void testRemoteService() {
        // Arrange
        RemoteSystem system = getRemoteSystem();
        Assume.assumeTrue("Remote system must be available for this test", system.isAvailable());

        // Act
        Result result = system.performOperation();

        // Assert
        assertTrue(result.isSuccess());
    }
  RequiredImports: |
    org.junit.Assume

CRITICAL_OUTPUT_RESTRICTIONS: |
  - DO NOT output entire test classes
  - DO NOT include package declarations or imports in the code section
  - DO NOT include class definitions like "public class TestClass {}"
  - DO NOT create @Before, @BeforeEach, @After, @AfterEach methods
  - DO NOT create setUp() or tearDown() methods
  - ONLY output the refactored test method(s)
  - ENSURE each method is completely self-contained and compilable 