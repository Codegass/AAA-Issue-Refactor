SmellType: Missing Assert
Description: A test method performs an action (the Act) but lacks any assertions to verify the outcome. A test without assertions is not a real test, as it cannot fail.
Variables:
  TestType: Stores whether the test should be treated as positive (expecting success) or negative (expecting an exception) for later steps.
Steps:
  - Description: Identify the primary 'Act' of the test, which is the method call that changes state or produces a result.
    Action: IdentifyAction
    Parameters:
      SourcePattern: Find the main method invocation that is not part of the setup.
  
  - Description: Determine if this is a positive or negative test based on method name, context, and expected behavior, and capture the classification in `TestType` for later use.
    Action: AnalyzeTestType
    Parameters:
      PositiveIndicators: Method names like 'test*', 'should*Work', 'verify*Success', regular business logic calls without error handling
      NegativeIndicators: Method names containing 'Invalid', 'Error', 'Exception', 'Fail', 'Bad', 'Null', 'Empty', existing try-catch blocks
  
  - Description: CRITICAL - Analyze the execution context and variable scope before adding assertions.
    Action: AnalyzeExecutionContext
    Parameters:
      ContextAnalysis: |
        Before adding assertions, verify:
        1. What variables are available in the current scope?
        2. What objects have been created and are accessible?
        3. What return values can be captured from method calls?
        4. What state changes can be observed and verified?
        5. Are there any required imports for the assertion methods to be used?
  
  - Description: Add appropriate assertions based on `TestType`. CRITICAL - Most tests are positive tests expecting normal execution without exceptions.
    Action: AddAssertion
    Parameters:
      TestType: "{TestType}"
      TargetMethod: The original test method.
      CompilationSafety: |
        MANDATORY REQUIREMENTS for assertion code:
        1. Ensure all variables used in assertions are properly declared and in scope
        2. Verify that assertion methods are available (check imports)
        3. Use appropriate assertion types for the return values and objects available
        4. Handle any potential null values or uninitialized objects
        5. Ensure lambda expressions have access to all required variables (final or effectively final)
      PositiveTestPattern: |
        For positive tests (DEFAULT assumption):
        - If method returns void: Use assertDoesNotThrow(() -> methodCall()) to verify no exception
        - If method returns a value: Use assertEquals(expected, actual) or assertNotNull(result)
        - If method changes object state: Use assertTrue(object.isStateChanged()) or assertEquals(expectedState, object.getState())
        - Always capture return values in appropriately typed variables before assertions
        - Ensure all objects being tested are not null before calling methods on them
      NegativeTestPattern: |
        For negative tests (ONLY when clearly indicated):
        - Use assertThrows(SpecificExceptionClass.class, () -> methodCall())
        - Specify the most specific exception type expected
        - Only use this when the test name or context clearly indicates expecting an exception

TestTypeGuidelines: |
  IMPORTANT: Default to POSITIVE TESTS unless there are clear indicators of negative testing:
  
  POSITIVE TEST (Default - expecting success):
  - Test method names like: testGuestInterface, testAddItem, shouldCalculateTotal
  - Business logic methods called in normal flow
  - No existing exception handling in the original test
  → Use: assertDoesNotThrow, assertEquals, assertNotNull, assertTrue, etc.
  
  NEGATIVE TEST (Only when clearly indicated):
  - Test method names like: testInvalidInput, shouldThrowExceptionWhenNull, testWithBadData
  - Methods called with obviously invalid parameters
  - Existing try-catch blocks expecting exceptions
  → Use: assertThrows(SpecificException.class, () -> ...)

RequiredImports:
  - "Keep all existing imports from the original test"
  - "static org.junit.jupiter.api.Assertions.assertDoesNotThrow"
  - "static org.junit.jupiter.api.Assertions.assertThrows"
  - "static org.junit.jupiter.api.Assertions.*"

ImportInstructions: |
  IMPORTANT: Include the appropriate imports based on the assertions you use.
  For positive tests: static org.junit.jupiter.api.Assertions.assertDoesNotThrow
  For negative tests: static org.junit.jupiter.api.Assertions.assertThrows
  For value assertions: static org.junit.jupiter.api.Assertions.assertEquals, assertNotNull, assertTrue, etc.

CompilationSafety: |
  Ensure the refactored test method:
  1. Properly declares and initializes all variables used in assertions
  2. Has access to all required imports for assertion methods
  3. Uses correct syntax for lambda expressions in assertDoesNotThrow/assertThrows
  4. Handles any checked exceptions appropriately
  5. Maintains proper variable scope and accessibility
  6. Uses appropriate assertion methods for the data types involved

VariableScopeGuidelines: |
  When adding assertions:
  - Capture method return values in properly typed variables
  - Ensure variables used in lambda expressions are final or effectively final
  - Declare new variables if needed to hold assertion targets
  - Verify all objects are properly initialized before using them in assertions
  - Use appropriate null checks when necessary

Example:
  PositiveTestBefore: |
    @Test
    public void testGuestInterface() {
        // Arrange
        bindGuest();
        
        // Act
        testService.guestInterface();
    }
  PositiveTestAfter: |
    @Test
    public void testGuestInterface() {
        // Arrange
        bindGuest();
        
        // Act & Assert
        assertDoesNotThrow(() -> {
            testService.guestInterface();
        });
    }
  
  PositiveTestWithReturnValueBefore: |
    @Test
    public void testCalculateTotal() {
        // Arrange
        Calculator calc = new Calculator();
        
        // Act
        calc.calculate(10, 20);
    }
  PositiveTestWithReturnValueAfter: |
    @Test
    public void testCalculateTotal() {
        // Arrange
        Calculator calc = new Calculator();
        
        // Act
        int result = calc.calculate(10, 20);
        
        // Assert
        assertEquals(30, result);
        assertTrue(result > 0);
    }
  
  NegativeTestBefore: |
    @Test
    public void testInvalidCredentials() {
        // Arrange
        String invalidUser = null;
        
        // Act
        authService.authenticate(invalidUser, "password");
    }
  NegativeTestAfter: |
    @Test
    public void testInvalidCredentials() {
        // Arrange
        String invalidUser = null;
        
        // Act & Assert
        assertThrows(IllegalArgumentException.class, () -> {
            authService.authenticate(invalidUser, "password");
        });
    }
  RequiredImports: |
    static org.junit.jupiter.api.Assertions.assertDoesNotThrow
    static org.junit.jupiter.api.Assertions.assertThrows
    static org.junit.jupiter.api.Assertions.assertEquals
    static org.junit.jupiter.api.Assertions.assertTrue

CRITICAL_OUTPUT_RESTRICTIONS: |
  - DO NOT output entire test classes
  - DO NOT include package declarations or imports in the code section
  - DO NOT include class definitions like "public class TestClass {}"
  - DO NOT create @Before, @BeforeEach, @After, @AfterEach methods
  - DO NOT create setUp() or tearDown() methods
  - ONLY output the refactored test method(s)
  - Each method should be self-contained with its own Arrange section
  - ENSURE each method is completely self-contained and compilable 